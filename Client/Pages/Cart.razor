@page "/cart"
@inject ICartService CartService

<PageTitle>Корзина</PageTitle>
<h3>Корзина</h3>

@if(cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}

else
{
    <div>
        @foreach (var product in cartProducts)
       {
           <div class="container"> 
               <div class="image-wrapper"> 
                   <img src="@product.ImageUrl"  class="image"/>
               </div>
               <div class="name"> 
                   <h5>
                       <a href="/product/@product.ProductId">@product.Title</a>
                   </h5>
                   <span>@product.ProductType</span><br/>
                   <button class="btn-delete" @onclick="@(() => 
                       RemoveProductFromCart(product.ProductId, product.ProductTypeId))">Удалить</button>
               </div>
               <div class="cart-product-price"> 
                   @product.Price
               </div>
           </div>
       }

       <div class="cart-product-price">
           Всего: (@cartProducts.Count): @cartProducts.Sum(product => product.Price)
       </div>

    </div>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Загрузка корзины....";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }


    private async Task LoadCart()
    {
        if((await CartService.GetCartItems()).Count == 0)
        {
            message = "Корзина пуста ;(";
            cartProducts = new List<CartProductResponse>();
        }

        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }
}
