@page "/admin/product-types"
@inject IProductTypeService ProductTypeService
@implements IDisposable
@attribute [Authorize(Roles = "Admin")]

<h3>ProductTypes</h3>


@foreach (var productTypes in ProductTypeService.ProductTypes)
{
    @if(productTypes.isEditing)
    {
        <EditForm Model="editingProductType" OnSubmit="UpdateProductType">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="editingProductType.Name" class="form-control"></InputText>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">
                @productTypes.Name
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="@(() => EditProductType(productTypes))">
                        <i class="oi oi-pencil"></i>    
                </button>
            </div>
        </div>
    }
}
<button class="btn btn-primary" @onclick="CreateNewProductType">
        <i class="oi oi-plus"></i> Новый тип
</button>

@code {
    ProductType editingProductType = null;

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        ProductTypeService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductTypeService.OnChange -= StateHasChanged;
    }

    private void EditProductType(ProductType productTypes)
    {
        productTypes.isEditing = true;
        editingProductType = productTypes;
    }

    private void CreateNewProductType()
    {
        editingProductType = ProductTypeService.CreateNewProductType();
    }

    private async Task UpdateProductType()
    {
        if(editingProductType.isNew)
        {
            await ProductTypeService.AddProductType(editingProductType);
        }
        else
        {
            await ProductTypeService.UpdateProductType(editingProductType);
        }
        editingProductType = new ProductType();
    }

}
